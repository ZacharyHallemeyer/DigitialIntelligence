[
  {
    "name": "Variables",
    "index": 0,
    "puzzles": [
      {
        "testCases": [
          {
            "problem": "",
            "answer": "-5"
          }
        ],
        "hiddenTestCases": [],
        "clueImagePath": "PuzzleImages/VariablesAdventure",
        "startingCode": "# This is a python comment, whatever text is after a # character will not \n# be executed as python code\n# This is helpful for writing what code is doing\n\n# This is a function declaration (we will talk about this later)\ndef main():\n\t# This is a variable declaration and assignment\n\t# After this line, the variable called numberVariable will hold the value 5\n\tnumberVariable = 5\n\tprint(numberVariable)\n\t\n\t# Set the numberVariable value to -5 in the same fashion as above\n\n\tprint(numberVariable)\n\n\t# This is a return statment and it is used inside functions\n\t# We will talk about this more later\n\t# The important thing to know if that value that is returned must be \n\t# what the puzzle is testing for\n\treturn numberVariable\n\t\n\nmain()",
        "directions": "Directions:\n\nVariables are like boxes that you can place items in. Each variable can be named a different name and can store any values. When we say \"Variables are like boxes that you can place items in,\" we're drawing a metaphor to help understand the concept of variables in programming.\n\nIn real life, you might use a box to store things like books, clothes, or toys. You might even label these boxes so you know what's inside them without having to look. This way, if you need a book, you can just go to the box labeled \"books\" and grab what you need.\n\nIn programming, variables work in a similar way. A variable is like a box where you can store different kinds of information, which in programming terms, we call data. This could be a number, a word (which we call a \"string\"), a list of items, and so on.\n\nFor this puzzle, you will need to set a variable to a new value by following directions in the code.",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Sunshine",
        "puzzleName": "VariableOne",
        "puzzleIndex": 0
      },
      {
        "testCases": [
          {
            "problem": "5",
            "answer": "5"
          },
          {
            "problem": "10",
            "answer": "10"
          }
        ],
        "hiddenTestCases": [],
        "clueImagePath": "PuzzleImages/VariablesSerendipity",
        "startingCode": "# This function has a variable being passed into the function\n# The variable `parameter` will store whatever value is being passed into the function\n# For instance, if the function is being called like `main(5)`, \n# the variable `parameter` will hold 5\ndef main(parameter):\n\t# Assign the value of parameter to a new variable called `numberVariable`\n\t\n\n\treturn numberVariable\n\n\nprint(main(5))\nprint(main(7))",
        "directions": "Directions:\nParameters are utilized within functions. These are variables or values that are fed into a function, to be subsequently employed within that function. Here's an example:\n\ndef main(variable):  # 'variable' is the parameter\n\tprint(variable)\n\nmain(5)  # Here, '5' is the argument passed to the function\nmain(10)  # Here, '10' is the argument passed to the function\n\nIn this case, '5' and '10' are the arguments we're passing to our function main, and variable is the parameter that receives these arguments.\n\n5 and 10 will be printed after this code runs",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Adventure",
        "puzzleName": "VariableTwo",
        "puzzleIndex": 1
      },
      {
        "testCases": [
          {
            "problem": "5",
            "answer": "25"
          },
          {
            "problem": "10",
            "answer": "50"
          },
          {
            "problem": "-5",
            "answer": "-25"
          }
        ],
        "hiddenTestCases": [],
        "clueImagePath": "PuzzleImages/VariablesHarmony",
        "startingCode": "def main(parameter):\n\t# Create a variable called `numberVariable` \n\t# Set `numberVariable` to the value in `parameter`\n\n\tprint(numberVariable)\n\n\t# Add the value in `parameter` to `numberVariable`\n\n\tprint(numberVariable)\n\n\t# Multiply the value in `numberVariable` by 5\n\t\n\tprint(numberVariable)\n\n\t# Divide the value in `numberVariable` by 2\n\t\n\tprint(numberVariable)\t\n\n\treturn numberVariable\n\n\nmain(10)\nmain(20)\nmain(-5)",
        "directions": "Directions:\nThere are many things that you can do with variables. One of the main ways to use variables are to perform mathematical operations on the variables\n\nOperations:\n\t• + \n\t  ○ + will add two values, for instance `1 + 1` will result in two and `variableOne + variableTwo` will result in the sum of the values in variableOne and variableTwo\n\t• - \n\t  ○ - will add subtract two values, for instance `1 - 1` will result in zero and `variableOne - variableTwo` will result in the difference of the values in variableOne and variableTwo\n\t• *\n\t  ○ * will add multiply two values, for instance `1 * 1` will result in one and `variableOne * variableTwo` will result in the product of the values in variableOne and variableTwo\n\t• /\n\t  ○ / will add divide two values, for instance `1 / 1` will result in two and `variableOne / variableTwo` will result in the quotient of the values in variableOne and variableTwo\n\nExamples:\n\n1.\nnumberVariable = 5\nnumberVariable = numberVariable + 5\nprint(numberVariable) # This will print `10`\n\n2.\nnumberVariable = 5\nnumberVariable -= 5\nprint(numberVariable) # This will print `0`\n\n\nFor this puzzle, Follow the directions in the code. You will need to perform mathematical operations on a variable called `numberVariables`",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Serendipity",
        "puzzleName": "VariableThree",
        "puzzleIndex": 2
      },
      {
        "testCases": [
          {
            "problem": "",
            "answer": "Hello World"
          }
        ],
        "hiddenTestCases": [],
        "clueImagePath": "PuzzleImages/VariablesEnigma",
        "startingCode": "def main():\n\thelloVariable = \"Hello\"\n\tworldVariable = \" World\"\n\n\tprint(helloVariable)\n\tprint(worldVariable)\n\t\n\t# Create a new variable called `helloWorld` and set it to \"\"  \n\t# which is an empty string\n\thelloWorld = \"\"\n\n\t# Set the variable `helloWorld` to the variables \n\t# helloVariable and worldVariable with `+`\n\n\t# The value in `helloWorld` should now be \"Hello World\"\n\t\n\tprint(helloWorld)\n\n\treturn helloWorld\n\nmain()",
        "directions": "Directions:\nVariables can also hold a datatype known as strings. Strings are text that the computer can hold and use. For instance, a variable can hold the sentence: \"Hello World!\" as a string\n\nExamples of Strings:\n\n1.\nstringVariable = \"Hello World!\"\nprint(stringVariable) # This will print `HelloWorld`\n\nStrings can be modified and manipulated with python code. A basic way to do this is to add two string with `+` which is called concatenation\n\nExamples of concatenation\n1.\nfirstName = \"John\"\nlastName = \"Doe\"\nprint(firstName + lastName) # Prints `JohnDoe`\n\nFor this puzzle, you will have to follow the directions in the code. You will need to concatenate two strings and return the concatenation",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Harmony",
        "puzzleName": "VariableFour",
        "puzzleIndex": 3
      },
      {
        "testCases": [
          {
            "problem": "",
            "answer": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
          }
        ],
        "hiddenTestCases": [],
        "clueImagePath": "PuzzleImages/VariablesSunshine",
        "startingCode": "def main():\n\tlistOne = [1,2,3,4,5]\n\tlistTwo = [6,7,8,9,10]\n\t\n\tprint(listOne)\n\tprint(listTwo)\n\n\t# Combine the first and second list and set it to a new variable \n\t# called `listThree`\n\n\tprint(listThree) # This should print [1,2,3,4,5,6,7,8,9,10]\n\n\treturn listThree\n\nmain()",
        "directions": "Directions:\nVariables can also hold a datatype known as lists. Lists are collections of items that are ordered and changeable. For instance, a variable can hold a list of numbers: `[1, 2, 3, 4, 5]`.\n\nExamples of Lists:\n\n1.\nlistVariable = [1, 2, 3, 4, 5]\nprint(listVariable) # This will print `[1, 2, 3, 4, 5]`\n\nLists can be modified and manipulated with Python code. A basic way to do this is to add two lists with `+`, which combines the lists into one.\n\nExamples of list combination:\n\n1.\nfirstList = [1, 2, 3]\nsecondList = [4, 5, 6]\nprint(firstList + secondList) # Prints `[1, 2, 3, 4, 5, 6]`\n\nFor this puzzle, you will have to follow the directions in the code. You will need to combine two lists and return the combined list.",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Enigma",
        "puzzleName": "VariableFive",
        "puzzleIndex": 4
      }
    ]
  },
  {
    "name": "Conditionals",
    "index": 1,
    "puzzles": [
      {
        "testCases": [
          {
            "problem": "5",
            "answer": "True"
          },
          {
            "problem": "6",
            "answer": "False"
          },
          {
            "problem": "-5",
            "answer": "True"
          }
        ],
        "hiddenTestCases": [],
        "clueImagePath": "PuzzleImages/ConditionalsEnigmatic",
        "startingCode": "def main(parameterNumber):\n\ttestingNumber = 5\n\t\n\t# Check if the `parameterNumber` is less than or equal to `testingNumber`\n\t# Store the result in `booleanResult`\n\t\n\n\t# Return the boolean result\n\treturn booleanResult",
        "directions": "Directions:\n\nConditionals are like instructions for a computer to make decisions. They allow you to tell the computer, \"If something is true, do one thing. Otherwise, do something else.\"\n\nConditionals are either true or false. In python, there are Booleans (written as bool) which can hold either True or False. For example\n\ntrueBool = True\nfalseBool = False\n\nBooleans can be assigned directly or by using comparison operators. The available comparison operators are listed below\n\t• Equal to: ==\n\t\t○ 1 == 1 # True\n\t\t○ 1 == 2 # False\n\t• Not equal to: !=\n\t\t○ \"Hello\" != \"Hello\" # False\n\t\t○ \"Hello\" != \"World\" # True\n\t• Greater than: >\n\t\t○ 2 > 1 # True\n\t\t○ 1 > 1 # False\n\t• Less than: <\n\t\t○ 1 < 2 # True\n\t\t○ 1 < 1 # False\n\t• Greater than or equal to: >=\n\t\t○ 1 <= 1 # True\n\t\t○ 1 <= 3 # True\n\t• Less than or equal to: <=\n\t\t○ 1 <= 1 # True\n\t\t○ 1 <= 2 # True\n\nWith comparison operators, we can compute our own boolean variables as seen below\n\nbooleanVariable = 1 < 2 # True\nbooleanVariable = 2 < 1 # False\n\nFor the puzzle, You need to check if the number passed into the function `main` is less than or equal to the variable `testingNumber` and return the calculated value",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Cascade",
        "puzzleName": "ConditionalsOne",
        "puzzleIndex": 1
      },
      {
        "testCases": [
          {
            "problem": "6",
            "answer": "Greater than 5"
          },
          {
            "problem": "5",
            "answer": "Less than or equal to 5"
          },
          {
            "problem": "-5",
            "answer": "Less than or equal to 5"
          }
        ],
        "hiddenTestCases": [],
        "clueImagePath": "PuzzleImages/ConditionalsJubilant",
        "startingCode": "def main(parameterNumber):\n\t# Use an if statement to check if parameterNumber is greater than 5\n\t# If parameterNumber is greater than 5,\n\t# then return \"Greater than 5\"\n\n\t# Otherwise, return \"Less than or equal to 5\"\n\n\n# Call the main function with different arguments and print the results\nprint(main(5))\nprint(main(6))\nprint(main(100))",
        "directions": "Directions:\n\nIf statements allow a computer to execute code when only a conditional evaluates to True. The basic structure of an if statement is as follows\n\nif(condition) :\n\t# This code runs if condition is True\nelse:\n\t# This code runs if conditions is False",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Enigmatic",
        "puzzleName": "ConditionalsTwo",
        "puzzleIndex": 2
      },
      {
        "testCases": [
          {
            "problem": "120",
            "answer": "Greater than 100"
          },
          {
            "problem": "100",
            "answer": "Greater than 50"
          },
          {
            "problem": "51",
            "answer": "Greater than 50"
          },
          {
            "problem": "50",
            "answer": "Greater than 25"
          },
          {
            "problem": "25",
            "answer": "Less than 25"
          },
          {
            "problem": "20",
            "answer": "Less than 25"
          }
        ],
        "hiddenTestCases": [],
        "clueImagePath": "PuzzleImages/ConditionalsSolitude",
        "startingCode": "def main(parameterNumber):\n\n\t# Check if `parameterNumber` is greater than 100\n\t\t# If so, return \"Greater than 100\"\n\t# Otherwise, check if `parameterNumber` is greater than 50 \n\t\t# If so, return \"Greater than 50\"\n\t# Otherwise, check if `parameterNumber` is greater than 25\n\t\t# If so, return \"Greater than 25\"\n\t# Otherwise\t\n\t\t# return \"Less than 25\"",
        "directions": "Directions:\n\nThere are also if-else statements (elif). The if-else statements are used to check multiple conditions in a sequence. The structure is as follows\n\nif(conditionOne):\n\t# This code runs if conditionOne is True\nelif(conditionTwo):\n\t# This code runs if conditionOne is False and conditionTwo is True\nelse:\n\t# This code runs if conditionOne and conditionTwo are False",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Jubilant",
        "puzzleName": "ConditionalsThree",
        "puzzleIndex": 3
      },
      {
        "testCases": [
          {
            "problem": "0",
            "answer": "Between 0 and 10"
          },
          {
            "problem": "5",
            "answer": "Between 0 and 10"
          },
          {
            "problem": "10",
            "answer": "Between 0 and 10"
          },
          {
            "problem": "11",
            "answer": "Between 11 and 20"
          },
          {
            "problem": "15",
            "answer": "Between 11 and 20"
          },
          {
            "problem": "20",
            "answer": "Between 11 and 20"
          },
          {
            "problem": "21",
            "answer": "Between 21 and 30"
          },
          {
            "problem": "25",
            "answer": "Between 21 and 30"
          },
          {
            "problem": "30",
            "answer": "Between 21 and 30"
          },
          {
            "problem": "-1",
            "answer": "Not between 0 and 30"
          },
          {
            "problem": "31",
            "answer": "Not between 0 and 30"
          }
        ],
        "hiddenTestCases": [],
        "clueImagePath": "PuzzleImages/ConditionalsZephyr",
        "startingCode": "def main(parameterNumber):\n\n\t# Check if parameterNumber is between 0 and 10 (0...5...10)\n\t\t# Return \"Between 0 and 10\"\n\t# Check if parameterNumber is between 11 and 20 (11...15...20)\n\t\t# Return \"Between 11 and 20\"\n\t# Check if parameterNumber is between 21 and 30 (21...25..30)\n\t\t# Return \"Between 21 and 30\"\n\n\t# Otherwise, Return \"Not between 0 and 30\"\n\nprint(main(0))\nprint(main(5))\nprint(main(10))\nprint(main(11))\nprint(main(15))\nprint(main(20))\nprint(main(21))\nprint(main(25))\nprint(main(30))",
        "directions": "Directions:\n\nIf statements can get pretty complex when checking for multiple conditions. Fortunately, we can expand out conditionals to simplify our if-statements\n\nWe can do this by using logical operators. Logical operators allow us to combine, negate, or modify boolean expressions. The available logical operators are listed below\n\n\t• AND: and\n\t\t○ True and True # Evaluates to True \n\t\t○ True and False # Evaluates to False\n\t\t○ False and False # Evaluates to False\n\t• OR: or\n\t\t○ True or True # Evaluates to True\n\t\t○ True or False # Evaluates to True\n\t\t○ False or False # Evaluates to False\n\t• NOT: not\n\t\t○ not False # Evaluates to True\n\t\t○ not True # Evaluates to False\n\t\t○ True and not False # Evaluates to True \n\t\t○ not True and False # Evaluates to False",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Solitude",
        "puzzleName": "ConditionalsFour",
        "puzzleIndex": 4
      },
      {
        "testCases": [
          {
            "problem": "100",
            "answer": "A"
          },
          {
            "problem": "90",
            "answer": "A"
          },
          {
            "problem": "89",
            "answer": "B"
          },
          {
            "problem": "80",
            "answer": "B"
          },
          {
            "problem": "79",
            "answer": "C"
          },
          {
            "problem": "70",
            "answer": "C"
          },
          {
            "problem": "69",
            "answer": "D"
          },
          {
            "problem": "60",
            "answer": "D"
          },
          {
            "problem": "59",
            "answer": "F"
          },
          {
            "problem": "20",
            "answer": "F"
          }
        ],
        "hiddenTestCases": [],
        "clueImagePath": "PuzzleImages/ConditionalsCascade",
        "startingCode": "def main(grade):\n\n\treturn \"F\"\n\nprint(main(100))\nprint(main(90))\nprint(main(70))\nprint(main(50))",
        "directions": "Directions:\nTime to practice what you have learned!\n\nAn integer from 0 to 100 will be passed into the function main. You will need to do the following\n\t• Return an \"A\" string if the grade is between 90 and 100\n\t• Return a \"B\" string if the grade is between 80 and 89\n\t• Return a \"C\" string if the grade is between 70 and 79\n\t• Return a \"D\" string if the grade is between 60 and 69\n\t• Return a \"F\" string if the grade is less than 59",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Zephyr",
        "puzzleName": "ConditionalsFive",
        "puzzleIndex": 5
      }
    ]
  },
  {
    "name": "Puzzle One",
    "index": 2,
    "puzzles": [
      {
        "testCases": [
          {
            "problem": "[1, 2, 20, 15, 3]",
            "answer": "[1, 2, 3, 15, 20]"
          },
          {
            "problem": "[1, 5, 4, 3, 2]",
            "answer": "[1, 2, 3, 4, 5]"
          },
          {
            "problem": "[12, 5, 9, 3, 18, 1, 10, 15, 7, 2, 14, 20, 6, 8, 19, 11, 17, 4, 16, 13]",
            "answer": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"
          }
        ],
        "hiddenTestCases": [
          {
            "problem": "[2, 4, 40, 30, 6]",
            "answer": "[2, 4, 6, 30, 40]"
          },
          {
            "problem": "[2, 10, 8, 6, 4]",
            "answer": "[2, 4, 6, 8, 10]"
          },
          {
            "problem": "[48, 20, 36, 12, 72, 4, 40, 60, 28, 8, 56, 80, 24, 32, 76, 44, 68, 16, 64, 52]",
            "answer": "[4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80]"
          }
        ],
        "clueImagePath": "PuzzleImages/Puzzle1",
        "startingCode": "def main(list):\n\n\t# Sort list here\n\n\treturn list # Remember to return the calculated value\n\n\nprint(main([1,3,2,5,4]))",
        "directions": "Directions:\nSorting an integer list is your task! Follow these steps:\n1. Start with the given list of integers.\n2. Sort the list in ascending order.\n\t- For example, [2, 1, 4, 3] becomes [1, 2, 3, 4].\n3. Once you have sorted the list, it will be the final result.\n4. Remember to return the sorted list as the output of your function.\n\nExample:\nSort the list [2, 1, 4, 3] using the steps above:\n- After sorting, the list becomes [1, 2, 3, 4].\n\nNow it's your turn! Write a function to sort the given list of integers, following these steps. Good luck!\n",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Orchid",
        "puzzleName": "PuzzleOne",
        "puzzleIndex": 1
      },
      {
        "testCases": [
          {
            "problem": "\"czggj\"",
            "answer": "hello"
          },
          {
            "problem": "\"kizphjijpgomvhdxmjnxjkdxndgdxjqjgxvijxjidjndn\"",
            "answer": "pneumonoultramicroscopicsilicovolcanoconiosis"
          }
        ],
        "hiddenTestCases": [
          {
            "problem": "\"czggjczggj\"",
            "answer": "hellohello"
          },
          {
            "problem": "\"kizphjijpgomvhdxmjnxjkdxndgdxjqjgxvijxjidjndnkizphjijpgomvhdxmjnxjkdxndgdxjqjgxvijxjidjndn\"",
            "answer": "pneumonoultramicroscopicsilicovolcanoconiosispneumonoultramicroscopicsilicovolcanoconiosis"
          }
        ],
        "clueImagePath": "PuzzleImages/Puzzle2",
        "startingCode": "def main(string):\n\n\t# Decrypt string here\n\n\treturn string # Remember to return the decrypted string\n\n\nprint(main('czggj'))",
        "directions": "Directions:\nDecrypting a secret message is your mission! Follow these steps:\n1. Examine the encrypted string, character by character.\n2. Replace each character with the one that is 5 places up in the alphabet.\n\t- For example, 'a' becomes 'f', and 'z' becomes 'e'.\n3. Continue this process until you've replaced all characters.\n4. The resulting string is your decrypted message.\n5. Remember to return the decrypted string as the final output of your function.\n\nExample:\nDecrypt 'czggj' using the steps above:\n\t- 'c' becomes 'h'\n\t- 'z' becomes 'e'\n\t- 'g' becomes 'l'\n\t- 'g' becomes 'l'\n\t- 'j' becomes 'o'\n\nSo, 'czggj' decrypts to 'hello'.\n\nNow it's your turn! Write a function to decrypt the given encrypted string, following these steps. Good luck!\n",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Pineapple",
        "puzzleName": "PuzzleTwo",
        "puzzleIndex": 2
      },
      {
        "testCases": [
          {
            "problem": "1",
            "answer": "-1"
          },
          {
            "problem": "13",
            "answer": "13"
          },
          {
            "problem": "89",
            "answer": "89"
          },
          {
            "problem": "42",
            "answer": "-1"
          },
          {
            "problem": "60",
            "answer": "-1"
          },
          {
            "problem": "47",
            "answer": "47"
          }
        ],
        "hiddenTestCases": [
          {
            "problem": "2",
            "answer": "2"
          },
          {
            "problem": "15",
            "answer": "-1"
          }
        ],
        "clueImagePath": "PuzzleImages/Puzzle3",
        "startingCode": "def main(number):\n\n\t# Add code here\n\n\treturn 0 # Remember to return the calculated value\n\n\nprint(main(1))\nprint(main(89))",
        "directions": "Directions:\nDetermining if an integer is prime is your mission! Follow these steps:\n1. Take the given integer as input to your main function.\n2. Check if the integer is prime using the appropriate method.\n\t- If the integer is prime:\n\t\t- Return the integer as the final result.\n\t- If the integer is not prime:\n\t\t- Return -1 as the final result.\n\nExample:\nLet's check if the integer 17 is prime using the steps above:\n\t- 17 is a prime number, so we would return 17.\n\nNow it's your turn! Write a function that accepts an integer as input, checks if it's prime, and follows the steps above to return either the prime integer or -1 as the final result. Good luck!\n",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Jazz",
        "puzzleName": "PuzzleThree",
        "puzzleIndex": 3
      },
      {
        "testCases": [
          {
            "problem": "5",
            "answer": "5"
          },
          {
            "problem": "10",
            "answer": "55"
          },
          {
            "problem": "7",
            "answer": "13"
          },
          {
            "problem": "0",
            "answer": "0"
          }
        ],
        "hiddenTestCases": [
          {
            "problem": "6",
            "answer": "8"
          },
          {
            "problem": "9",
            "answer": "34"
          }
        ],
        "clueImagePath": "PuzzleImages/Puzzle4",
        "startingCode": "def main(number):\n\n\t# Add fibonacci sequence code here\n\t\n\treturn 0 # Remember to return the calculated value\n\nprint(main(10))",
        "directions": "Directions:\nCalculating the Fibonacci sequence value is your mission! Follow these steps:\n\t1. Take the given integer as input to your main function.\n\t2. Calculate the Fibonacci sequence value for the given number using the appropriate method.\n\t3. Return the Fibonacci sequence value as the final result of your function.\n\nAbout the Fibonacci Sequence:\nThe Fibonacci sequence is a series of numbers in which each number is the sum of the two preceding ones. It typically starts with 0 and 1.\nFor example, the Fibonacci sequence begins as follows: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and so on.\nEach number is obtained by adding the two previous numbers in the sequence. The first two numbers are defined as 0 and 1.\n\nCalculation Process:\nTo calculate the Fibonacci sequence value for a given number, follow these steps:\n\t- If the given number is 0, return 0.\n\t- If the given number is 1, return 1.\n\t- For any other number, recursively calculate the sum of the Fibonacci sequence values for the two preceding numbers.\n\t- Continue this process until you reach the given number in the sequence.\n\n\nExample:\nLet's calculate the Fibonacci sequence value for the number 10 using the steps above:\n- The Fibonacci sequence value for 10 is 55, so we would return 55.\n\nNow it's your turn! Write a function that accepts an integer as input, calculates the Fibonacci sequence value, and follows the steps above to return the Fibonacci sequence value as the final result. Good luck!\n",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Galaxy",
        "puzzleName": "PuzzleFour",
        "puzzleIndex": 4
      },
      {
        "testCases": [
          {
            "problem": "15",
            "answer": "blue"
          },
          {
            "problem": "20",
            "answer": "red"
          },
          {
            "problem": "50",
            "answer": "green"
          },
          {
            "problem": "75",
            "answer": "purple"
          },
          {
            "problem": "100",
            "answer": "black"
          },
          {
            "problem": "101",
            "answer": "black"
          },
          {
            "problem": "1000000",
            "answer": "black"
          }
        ],
        "hiddenTestCases": [
          {
            "problem": "1",
            "answer": "blue"
          },
          {
            "problem": "76",
            "answer": "purple"
          }
        ],
        "clueImagePath": "PuzzleImages/Puzzle5",
        "startingCode": "def main(number):\n\n\t# Add code here\n\n\treturn 'black'\n\nprint(main(15))\nprint(main(20))\nprint(main(50))\nprint(main(75))\nprint(main(100))\nprint(main(101))\nprint(main(1000000))",
        "directions": "Directions:\nAnalyzing a number and returning a corresponding color is your mission! Follow these steps:\n1. Accept the input number as a parameter to your main function.\n2. Analyze the number according to the provided conditions:\n\t- If the number is less than 20, return 'blue'.\n\t- If the number is less than 40, return 'red'.\n\t- If the number is less than 60, return 'green'.\n\t- If the number is less than 80, return 'purple'.\n\t- If the number is less than 100, return 'yellow'.\n\t- If none of the conditions match, return 'black'.\n4. Return the color as the final result of your main function.\n\nExample:\nLet's analyze the number 35 using the steps above:\n- Since 35 is less than 40, we would return 'red'.\n\nNow it's your turn! Write a function that accepts a number as input, implements the provided code, and follows the steps above to return the corresponding color as the final result. Good luck!\n",
        "puzzleType": "imageSolver",
        "unlockKeyword": "Hammer",
        "puzzleName": "PuzzleFive",
        "puzzleIndex": 5
      }
    ]
  }
]
