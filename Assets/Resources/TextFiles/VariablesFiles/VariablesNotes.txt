<color=#800020> Basic Syntax & Indentation</color>

  Python uses indentation to indicate a block of code. A standard convention is to use 4 spaces for each level of block indentation. For example:

<color=#097969>
   if True:
       print("True condition")
   else:
       print("False condition")
</color>

<color=#800020> Modules</color>

  You can import modules to use their code. For example:

<color=#097969>
   import math
   print(math.pi) # prints the number pi
</color>

<color=#800020> Comments</color>

  Comments are lines in a code file that will not be run at execution. This is useful for writing what a function does in a human-readable fashion.

  Single-line comments start with the # character. Multi-line comments start and end with either ''' or """.

<color=#097969>
   # This is a single-line comment

   '''
   This is a
   multi-line comment
   '''
</color>

<color=#800020> Variables</color>

  To create a variable, you write the variable name followed by an equals sign and the value that you want to store in the variable. For example:

<color=#097969>
   x = 5
   helloWorld = "Hello World!"
   myList = [1, 2, 3, 4, 5]
</color>

<color=#800020> Data Types</color>

  Python has different built-in data types that can be assigned to variables:

  - Numeric: This includes numbers such as integers, decimals, and complex numbers.
  - Sequence: This includes strings (e.g., "Hello World!"), tuples (e.g., (1, 2, 3)), and ranges (e.g., range(6)).
  - Mapping: This includes dictionaries.
  - Set: This includes sets (e.g., {1, 2, 3}).
  - Boolean: This includes bools for boolean values (e.g., True or False).

<color=#800020> Arithmetic Operators</color>

<color=#097969>
   # Addition (+)
   # x = 0 + 1 -> x evaluates to 1

   # Subtraction (-)

   # Multiplication (*)

   # Division (/)

   # Modulus (remainder of division) (%)
   # x = 5 % 3 -> x evaluates to 2

   # Exponentiation (**)

   # Floor division (division that rounds down) (//)
</color>

<color=#800020> Assignment Operators</color>

  These are used to assign values to variables:

<color=#097969>
   # Assign (=)

   # Add and assign (+=)
   # x = 1
   # x += 1 -> x evaluates to 2

   # Subtract and assign (-=)

   # Multiply and assign (*=)

   # Divide and assign (/=)

   # Modulus and assign (%=)

   # Exponentiate and assign (**=)

   # Floor divide and assign (//=)
</color>

<color=#800020> Membership Operators</color>

  These are used to test whether a value or variable is part of a sequence (string, list, tuple, etc.):

<color=#097969>
   # Is a member (in)
   # "Hello" in "Hello World" -> evaluates to True

   # Is not a member (not in)
   # "Hello" not in "Hello World" -> evaluates to False
</color>

<color=#800020> Conditionals</color>

  Conditionals allow a program to execute certain sections of code depending on if a condition is true or not.

<color=#097969>
   # Comparison Operators - These are used to compare values. They return either True or False.

   # Equal to (==)

   # Not equal to (!=)

   # Greater than (>)

   # Less than (<)

   # Greater than or equal to (>=)

   # Less than or equal to (<=)

   # Logical Operators - These are used to combine conditional statements.

   # And (and) - True and True -> evaluates to True ; True and False -> evaluates to False

   # Or (or) - True or True -> evaluates to True ; True or False -> evaluates to True

   # Not (not) - True and not True -> evaluates to False ; True and not False -> evaluates to True

   # If statements
   # It checks a condition and executes the code block following it if the condition is true.
   if 10 > 5:
       print("10 is greater than 5")
   # The above prints "10 is greater than 5"

   # Else statement
   # The else statement catches anything which isn't caught by the preceding conditions.
   if 5 > 10:
       print("5 is greater than 10")
   else:
       print("5 is not greater than 10")
   # The above prints "5 is not greater than 10"

   # Elif statement
   # The elif keyword is a way of saying "if the previous conditions were not true, then try this condition". It stands for "else if".
   if 5 > 10:
       print("5 is greater than 10")
   elif 5 == 5:
       print("5 is equal to 5")
   else:
       print("5 is not greater than 10")
   The above prints "5 is equal to 5"
</color>

<color=#800020> Loops</color>

<color=#E97451> For Loops</color>

  A for loop is used for iterating over a section of code:

<color=#097969>
   for index in range(10):
       print(index)
   # The above prints 0 through 9 on separate lines

   for index in range(1, 11):
       print(index)
   # The above prints 1 through 10 on separate lines

   for fruit in ['apple', 'banana', 'grape']:
       print(fruit)
   # The above prints apple, banana, and grape on separate lines
</color>

<color=#E97451> While Loops</color>

  A while loop will continue to execute as long as the condition in the while statement is true.

<color=#097969>
   index = 0
   while index < 10:
       print(index)
       index += 1
   # The above prints 0 through 9 on separate lines

   index = 0
   while index < 10:
       index += 1
       print(index)
   # The above prints 1 through 10 on separate lines
</color>

<color=#800020> Functions</color>

  Functions are sections of code that can be called any number of times to execute.

<color=#E97451> Declaring and Calling a Function</color>

<color=#097969>
   def printHello():
       print("Hello")



   printHello()
   printHello()
   # The above prints "Hello" twice
</color>

<color=#E97451> Parameters and Arguments</color>

  Functions can take parameters, which are values you can pass into the function.

<color=#097969>
   def printHello(name):
       print("Hello " + name)

   printHello("Zach")
   # The above prints "Hello Zach"
</color>

<color=#E97451> Return values</color>

  Functions can return values. This allows functions to produce outputs that can be stored in variables or used in expressions.

<color=#097969>
   def makeHello(name):
       return "Hello " + name

   hello = makeHello("Zach")
   print(hello)
   # The above prints "Hello Zach"
</color>

<color=#800020> Lists</color>

  Lists store multiple values in the same variable:

<color=#097969>
   fruits = ["apple", "banana", "grape"] # Creates a list
   print(fruits[0]) # Prints apple
   print(fruits[1]) # Prints banana
   print(fruits[2]) # Prints grape
   print(fruits[-1]) # Prints grape
   print(fruits[-3]) # Prints apple
   print(fruits[1:3]) # Prints ["banana", "grape"]

   fruits.append("lemon") # Adds "lemon" to the end of the list
   fruits.insert(0, "lime") # Adds "lime" to the start of the list

   print(fruits) # ['lime', 'apple', 'banana', 'grape', 'lemon']

   fruits.remove("lemon") # Removes "lemon" from the list
   fruits.append([1, 2, 3, 4, 5]) # Adds [1, 2, 3, 4, 5] to the end of the list
   print(fruits[-1]) # Prints [1, 2, 3, 4, 5]
   print(fruits[-1][0]) # Prints 1

   print(len(fruits)) # Prints the length of the list, which is 5 in this case
</color>

<color=#800020> Strings</color>

<color=#097969>
   text = "Hello, World!"  # Creates a string

   print(text[0])  # Prints H
   print(text[1])  # Prints e
   print(text[2])  # Prints l
   print(text[-1])  # Prints !
   print(text[-2])  # Prints d
   print(text[1:5])  # Prints "ello"

   text = text + " How are you?"  # Adds " How are you?" to the end of the string
   print(text)  # 'Hello, World! How are you?'

   text = "Hi, " + text  # Adds "Hi, " to the start of the string
   print(text)  # 'Hi, Hello, World! How are you?'

   text = text.replace("Hello", "Hey")  # Replaces "Hello" with "Hey"
   print(text)  # 'Hi, Hey, World! How are you?'

   print(len(text))  # Prints the length of the string which is 30 in this case

   # Getting a substring
   substring = text[4:14]  # Gets substring from index 4 to 13 (exclusive)
   print(substring)  # 'Hey, World'

   # Splitting a string into a list of words
   words = text.split()
   print(words)  # ['Hi,', 'Hey,', 'World!', 'How', 'are', 'you?']
</color>